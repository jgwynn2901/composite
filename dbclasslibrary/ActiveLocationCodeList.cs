#region Header
/**************************************************************************
 * Source File -- ActiveLocationCodeList.cs
 * 
 * NAME: DbClassLibrary.ActiveLocationCodeList.cs
 * $Author: Pintoa $

 * Innovation First Notice
 * 140 Kendrick Street 
 * Building A, Suite 300 
 * Needham, MA 02494
 * (617) 886-2600
 *
 * Proprietary Source Code -- Distribution restricted
*
* Copyright (c) 2011 by First Notice Systems
 **************************************************************************/
/* $Header: /SourceCode/Components/FNS2005/DbClassLibrary/ActiveLocationCodeList.cs 2     8/01/11 5:23p Pintoa $ */
#endregion

using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace DbClassLibrary
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Active location code.
    /// </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    [ComVisible(false)]
    public class ActiveLocationCode : ActiveRecord
    {
        private const string StrTableName = "LOCATION_CODE";

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveLocationCode"/> class.
        /// </summary>
        public ActiveLocationCode()
            : base(StrTableName)
        {
            // Begin AutoGenerated Column Definitions
            columns.Add(new Column("LOCATION_CODE_ID", String.Empty, "VARCHAR2"));
            columns.Add(new Column("STATE", String.Empty, "VARCHAR2"));
            columns.Add(new Column("FIPS", String.Empty, "VARCHAR2"));
            columns.Add(new Column("CITY", String.Empty, "VARCHAR2"));
            columns.Add(new Column("ZIP", String.Empty, "VARCHAR2"));
            columns.Add(new Column("COUNTY", String.Empty, "VARCHAR2"));
            columns.Add(new Column("LON", String.Empty, "VARCHAR2"));
            columns.Add(new Column("LAT", String.Empty, "VARCHAR2"));
            columns.Add(new Column("PRIMARY_LOC", String.Empty, "VARCHAR2"));
            columns.Add(new Column("COUNTRY", String.Empty, "VARCHAR2"));
            columns.Add(new Column("SEQ", String.Empty, "VARCHAR2"));
            columns.Add(new Column("UPLOAD_KEY", String.Empty, "VARCHAR2"));
            columns.Add(new Column("FILE_TRANS_LOG_ID", String.Empty, "VARCHAR2"));
            columns.Add(new Column("CREATED_DT", String.Empty, "VARCHAR2"));
            columns.Add(new Column("MODIFIED_DT", String.Empty, "VARCHAR2"));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveLocationCode"/> class.
        /// </summary>
        /// <param name="reader">The reader.</param>
        public ActiveLocationCode(IDataReader reader)
            : base(reader, StrTableName)
        {
        }

        /// <summary>
        /// Gets or sets the location code id.
        /// </summary>
        /// <value>
        /// The location code id.
        /// </value>
        public string LocationCodeId
        {
            get { return GetColumnValue("LOCATION_CODE_ID"); }
            set { SetColumnValue("LOCATION_CODE_ID", value); }
        }

        /// <summary>
        /// Gets or sets the state.
        /// </summary>
        /// <value>
        /// The state.
        /// </value>
        public string State
        {
            get { return GetColumnValue("STATE"); }
            set { SetColumnValue("STATE", value); }
        }

        /// <summary>
        /// Gets or sets the fips.
        /// </summary>
        /// <value>
        /// The fips.
        /// </value>
        public string Fips
        {
            get { return GetColumnValue("FIPS"); }
            set { SetColumnValue("FIPS", value); }
        }

        /// <summary>
        /// Gets or sets the city.
        /// </summary>
        /// <value>
        /// The city.
        /// </value>
        public string City
        {
            get { return GetColumnValue("CITY"); }
            set { SetColumnValue("CITY", value); }
        }

        /// <summary>
        /// Gets or sets the zip.
        /// </summary>
        /// <value>
        /// The zip.
        /// </value>
        public string Zip
        {
            get { return GetColumnValue("ZIP"); }
            set { SetColumnValue("ZIP", value); }
        }

        /// <summary>
        /// Gets or sets the county.
        /// </summary>
        /// <value>
        /// The county.
        /// </value>
        public string County
        {
            get { return GetColumnValue("COUNTY"); }
            set { SetColumnValue("COUNTY", value); }
        }

        /// <summary>
        /// Gets or sets the longitude.
        /// </summary>
        /// <value>
        /// The longitude.
        /// </value>
        public string Longitude
        {
            get { return GetColumnValue("LON"); }
            set { SetColumnValue("LON", value); }
        }

        /// <summary>
        /// Gets or sets the latitude.
        /// </summary>
        /// <value>
        /// The latitude.
        /// </value>
        public string Latitude
        {
            get { return GetColumnValue("LAT"); }
            set { SetColumnValue("LAT", value); }
        }

        /// <summary>
        /// Gets or sets the primary location.
        /// </summary>
        /// <value>
        /// The primary location.
        /// </value>
        public string PrimaryLocation
        {
            get { return GetColumnValue("PRIMARY_LOC"); }
            set { SetColumnValue("PRIMARY_LOC", value); }
        }

        /// <summary>
        /// Gets or sets the country.
        /// </summary>
        /// <value>
        /// The country.
        /// </value>
        public string Country
        {
            get { return GetColumnValue("COUNTRY"); }
            set { SetColumnValue("COUNTRY", value); }
        }

        /// <summary>
        /// Gets or sets the sequence.
        /// </summary>
        /// <value>
        /// The sequence.
        /// </value>
        public string Sequence
        {
            get { return GetColumnValue("SEQ"); }
            set { SetColumnValue("SEQ", value); }
        }

        /// <summary>
        /// Gets or sets the upload key.
        /// </summary>
        /// <value>
        /// The upload key.
        /// </value>
        public string UploadKey
        {
            get { return GetColumnValue("UPLOAD_KEY"); }
            set { SetColumnValue("UPLOAD_KEY", value); }
        }

        /// <summary>
        /// Gets or sets the file transaction log id.
        /// </summary>
        /// <value>
        /// The file transaction log id.
        /// </value>
        public string FileTransactionLogId
        {
            get { return GetColumnValue("FILE_TRANS_LOG_ID"); }
            set { SetColumnValue("FILE_TRANS_LOG_ID", value); }
        }

        /// <summary>
        /// Gets or sets the created date.
        /// </summary>
        /// <value>
        /// The created date.
        /// </value>
        public string CreatedDate
        {
            get { return GetColumnValue("CREATED_DT"); }
            set { SetColumnValue("CREATED_DT", value); }
        }

        /// <summary>
        /// Gets or sets the modified date.
        /// </summary>
        /// <value>
        /// The modified date.
        /// </value>
        public string ModifiedDate
        {
            get { return GetColumnValue("MODIFIED_DT"); }
            set { SetColumnValue("MODIFIED_DT", value); }
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// List of active location codes.
    /// </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    [ComVisible(false)]
    public sealed class ActiveLocationCodeList : ActiveRecordSet
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveLocationCodeList"/> class.
        /// </summary>
        public ActiveLocationCodeList()
            : base("ActiveLocationCode")
        {
        }

        // SELECT parameter selection
        public bool SelectAllColumns { get; set; }
        public bool SelectLocationCodeId { get; set; }
        public bool SelectState { get; set; }
        public bool SelectFips { get; set; }
        public bool SelectCity { get; set; }
        public bool SelectZip { get; set; }
        public bool SelectCounty { get; set; }
        public bool SelectLongitude { get; set; }
        public bool SelectLatitude { get; set; }
        public bool SelectPrimaryLocation { get; set; }
        public bool SelectCountry { get; set; }
        public bool SelectSequence { get; set; }
        public bool SelectUploadKey { get; set; }
        public bool SelectFileTransactionLogId { get; set; }
        public bool SelectCreatedDate { get; set; }
        public bool SelectModifiedDate { get; set; }

        // INDEX parameter selection
        public bool IndexPrimaryKey { get; set; }
        public bool IndexState { get; set; }
        public bool IndexCity { get; set; }
        public bool IndexCountry { get; set; }
        public bool IndexFips { get; set; }
        public bool IndexUploadKey { get; set; }
        public bool IndexPrimaryLocation { get; set; }

        // WHERE parameter selection
        public string WhereState { get; set; }
        public string WhereCity { get; set; }
        public string WhereZip { get; set; }
        public string WherePrimaryLocation { get; set; }
        public string WhereCountry { get; set; }
        public string WhereUploadKey { get; set; }
        public string WhereLtFileTransactionLogId { get; set; }
        public DateTime WhereLtModifiedDate { get; set; }
        public DateTime WhereGtModifiedDate { get; set; }

        /// <summary>
        /// Gets the query.
        /// </summary>
        /// <value>
        /// The query.
        /// </value>
        public override string Query
        {
            get
            {
                if (query.Length == 0)
                {
                    query = String.Format("{0} from LOCATION_CODE {1} {2}", CreateSelectClause(), CreateWhereClause(), CreateOrderByClause());
                }
                return query;
            }
        }

        /// <summary>
        /// Creates the order by clause.
        /// </summary>
        /// <returns></returns>
        private string CreateOrderByClause()
        {
            StringBuilder sb = new StringBuilder(1024);

            if (IndexPrimaryKey)
            {
                if (SelectAllColumns)
                    sb.Append("order by 1 ");
                else if (SelectLocationCodeId)
                    sb.Append("order by LOCATION_CODE_ID ");
            }
            else
            {
                ArrayList alOrderBy = new ArrayList(8);
                if (IndexState)             alOrderBy.Add("STATE");
                if (IndexCity)              alOrderBy.Add("CITY");
                if (IndexCountry)           alOrderBy.Add("COUNTRY");
                if (IndexFips)              alOrderBy.Add("FIPS");
                if (IndexUploadKey)         alOrderBy.Add("UPLOAD_KEY");
                if (IndexPrimaryLocation)   alOrderBy.Add("PRIMARY_LOC");

                int nOrderByParameters = alOrderBy.Count;
                if (nOrderByParameters > 0)
                {
                    sb.Append("order by ");
                    foreach (string orderByParameter in alOrderBy)
                    {
                        sb.Append(orderByParameter);
                        if (--nOrderByParameters != 0)
                            sb.Append(", ");
                    }

                    sb.Append(" "); // Add space to the end
                }
            }

            return sb.ToString();
        }

        /// <summary>
        /// Creates the select clause.
        /// </summary>
        /// <returns></returns>
        private string CreateSelectClause()
        {
            StringBuilder sb = new StringBuilder(1024);

            if (SelectAllColumns)
            {
                sb.AppendFormat("select * ");
            }
            else
            {
                ArrayList alSelect = new ArrayList(16);
                if (SelectLocationCodeId)       alSelect.Add("LOCATION_CODE_ID");
                if (SelectState)                alSelect.Add("STATE");
                if (SelectFips)                 alSelect.Add("FIPS");
                if (SelectCity)                 alSelect.Add("CITY");
                if (SelectZip)                  alSelect.Add("ZIP");
                if (SelectCounty)               alSelect.Add("COUNTY");
                if (SelectLongitude)            alSelect.Add("LON");
                if (SelectLatitude)             alSelect.Add("LAT");
                if (SelectPrimaryLocation)      alSelect.Add("PRIMARY_LOC");
                if (SelectCountry)              alSelect.Add("COUNTRY");
                if (SelectSequence)             alSelect.Add("SEQ");
                if (SelectUploadKey)            alSelect.Add("UPLOAD_KEY");
                if (SelectFileTransactionLogId) alSelect.Add("FILE_TRANS_LOG_ID");
                if (SelectCreatedDate)          alSelect.Add("CREATED_DT");
                if (SelectModifiedDate)         alSelect.Add("MODIFIED_DT");

                int nSelectParameters = alSelect.Count;
                if (nSelectParameters > 0)
                {
                    sb.Append("select ");
                    foreach (string selectParameter in alSelect)
                    {
                        sb.Append(selectParameter);
                        if (--nSelectParameters != 0)
                            sb.Append(", ");
                    }

                    sb.Append(" "); // Add space to the end
                }
            }

            return sb.ToString();
        }

        /// <summary>
        /// Creates the where clause.
        /// </summary>
        /// <returns></returns>
        public string CreateWhereClause()
        {
            ArrayList alWhere = new ArrayList(16);
            if (!string.IsNullOrEmpty(WhereState))                  alWhere.Add(string.Format("STATE = \'{0}\'", WhereState));
            if (!string.IsNullOrEmpty(WhereCity))                   alWhere.Add(string.Format("CITY = \'{0}\'", WhereCity));
            if (!string.IsNullOrEmpty(WhereZip))                    alWhere.Add(string.Format("ZIP = \'{0}\'", WhereZip));
            if (!string.IsNullOrEmpty(WherePrimaryLocation))        alWhere.Add(string.Format("PRIMARY_LOC = \'{0}\'", WherePrimaryLocation));
            if (!string.IsNullOrEmpty(WhereCountry))                alWhere.Add(string.Format("COUNTRY = \'{0}\'", WhereCountry));
            if (!string.IsNullOrEmpty(WhereUploadKey))              alWhere.Add(string.Format("UPLOAD_KEY = \'{0}\'", WhereUploadKey));
            if (!string.IsNullOrEmpty(WhereLtFileTransactionLogId)) alWhere.Add(string.Format("FILE_TRANS_LOG_ID < \'{0}\'", WhereLtFileTransactionLogId));

            if (WhereLtModifiedDate.ToBinary() != 0) 
                alWhere.Add(string.Format("MODIFIED_DT < to_date(\'{0}/{1}/{2}\', \'MM/DD/YYYY\')", WhereLtModifiedDate.Month.ToString("D2"), WhereLtModifiedDate.Day.ToString("D2"), WhereLtModifiedDate.Year.ToString("D4")));
            if (WhereGtModifiedDate.ToBinary() != 0) 
                alWhere.Add(string.Format("MODIFIED_DT > to_date(\'{0}/{1}/{2}\', \'MM/DD/YYYY\')", WhereGtModifiedDate.Month.ToString("D2"), WhereGtModifiedDate.Day.ToString("D2"), WhereGtModifiedDate.Year.ToString("D4")));

            StringBuilder sb = new StringBuilder(1024);
            int nParameters = alWhere.Count;
            if (nParameters > 0)
            {
                sb.Append("where ");
                foreach (string whereParameter in alWhere)
                {
                    sb.Append(whereParameter);
                    if (--nParameters != 0)
                        sb.Append(" and ");
                }
                sb.Append(" "); // Append a space
            }

            return sb.ToString();
        }
    }
}

#region Log
/*
 * $Log: /SourceCode/Components/FNS2005/DbClassLibrary/ActiveLocationCodeList.cs $
 * 
 * 2     8/01/11 5:23p Pintoa
 * Activerecord based implementation of Location Code.
 * 
 * 1     8/01/11 5:20p Pintoa
 * New file
 */
#endregion
